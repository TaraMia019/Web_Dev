#include <iostream>
#include <fstream>
#include <bitset>
#include <unordered_map>
#include <queue>
#include <vector>
#include <string>

using namespace std;

const int MAX_CHAR = 256;

struct NodeData
    {
        char data;
        int frequency;
        NodeData* left;
        NodeData* right;

        NodeData(char c, int freq) : data(c), frequency(freq), left(nullptr), right(nullptr) {}
    };

struct priorityNode
    {
        priorityNode *next; //used when making the queue
        NodeData *node;  //used when making a tree
        priorityNode (NodeData *x) : node (x), next (nullptr) {}
    };

class HuffmanDecoding
    {
    private:
        priorityNode *frnt;
        NodeData* root;
        unordered_map<char, int> charFrequencyMap;

    public:
        HuffmanDecoding() : frnt(nullptr) {}
        HuffmanDecoding(NodeData* rootNode) : root(rootNode){}//Buffer

int buff()
    {
        ifstream inputFile2("Buffer.tne");

        if (!inputFile2.is_open())
            {
                std::cerr << "Error opening input file!" << std::endl;
            }
        int buffer;
        int tempBuff;
        char y;
        if (inputFile2 >> y)
        {
            tempBuff = stoi(string(1, y));
            buffer = tempBuff;
            cout << endl << "Buffer:" << buffer << endl;
        } else
        {
            std::cerr << "Error reading character from the file!" << std::endl;
        }
        return buffer;
    }

void enqueue(NodeData *x)
    {
        priorityNode *prioQ = new priorityNode(x);
        if (frnt == NULL || frnt->node->frequency > prioQ->node->frequency)
            {
                prioQ->next = frnt;
                frnt = prioQ;
            } else
            {
                priorityNode *temp = frnt;
            while (temp->next != NULL && temp->next->node->frequency <= prioQ->node->frequency)
            {
                temp = temp->next;
            }
            prioQ->next = temp->next;
            temp->next = prioQ;
            }

    }

NodeData* dequeue()
    {
        NodeData *toReturn = nullptr;
        if (frnt == nullptr)
            {
                cout << "No Data to Dequeue" << endl;
            } else
            {
            toReturn = frnt->node;
            priorityNode *temp = frnt;
            frnt = frnt->next;
            delete temp;
            }
        return toReturn;
    }

NodeData* buildHuffmanTree(ifstream& inputFile)
    {
    int counter = 0;
    char ch;
    char x;
    int frequency;

    while (inputFile.get(ch))
        {
            if (counter % 2 == 0) //if even
        {
            x = ch;
        } else //if odd
        {
            frequency = stoi (string (1, ch));
            NodeData* toNQ = new NodeData(x, frequency);
            enqueue(toNQ);
            frequency = 0;
        }
        counter++;
    }

NodeData *first, *second;
        while (frnt != NULL && frnt->next != NULL)
        {
            first = dequeue();
            second = dequeue();
            NodeData *combined = new NodeData('\0', first->frequency + second->frequency);
            combined->left = first;
            combined->right = second;
            enqueue(combined);
        }

            NodeData *toReturn = dequeue();
            preOrderTraversalHelper (toReturn, "");
            return toReturn;
    }


void preOrderTraversalHelper(NodeData* root, const string& path)
    {
        if (root == nullptr)
        {
            return;
        }

        if (root->data != '\0')
        {
            cout << "Tree representation:" << endl;
            cout << "Visited: " << root->data << ", Path: " << path << endl;
        }

        preOrderTraversalHelper(root->left, path + "0");
        preOrderTraversalHelper(root->right, path + "1");
        }

    string decodeBinaryFile(const string& inputFileName)
    {
        ifstream inputFile(inputFileName, ios::binary);
        int buffr = buff();
        if (!inputFile.is_open())
        {
            cerr << "Error opening input file!" << endl;
            return "";
        }

        string decodedString;
        char ch;
        NodeData* current = root;
        int charsRead = 0;
        int counter = 0;
        string huffmman;

        //ascii - decimal -

            while (inputFile.get(ch))
                {
                counter ++;
                for (int i = 7; i >= 0; --i)
                {
                    if (ch & (1 << i))
                    {
                        current = current->right;
                        huffmman+= '1';
                    } else
                    {
                        current = current->left;
                        huffmman+= '0';
                    }

                    if (current->left == nullptr && current->right == nullptr)
                    {
                        current = root;
                    }
                }
                cout << endl << "Binary of the text:" << endl << huffmman << ch;
                }
                    current = root;


            int length = (counter * 8) - buffr;
            for (int i = 0; i < length; i++)
            {
                //follow 0's and 1's
                if (huffmman[i] == '0')
                {
                    current = current->left;

                    if (current->left == NULL && current->right == NULL) //leaf
                    {
                        decodedString += current->data;
                        current = root;
                    }
                } else if (huffmman[i] == '1')
                {
                    current = current->right;

                    if (current->left == NULL && current->right == NULL) //leaf
                    {

                        decodedString += current->data;
                        current = root;
                    }
                }

                //if leaf is reached, go back to root
            }

            cout << endl << endl << "DECOMPRESSED TEXT:" << decodedString << endl;

            inputFile.close();
            return decodedString;
        }

    void saveDecodedStringToFile(const string& decodedString, const string& outputFileName)
    {
        ofstream outputFile(outputFileName);

        if (!outputFile.is_open())
            {
                cerr << "Error opening output file!" << endl;
                return;
            }

            outputFile << decodedString;
            outputFile.close();
        }
    };

    int main() {
        ifstream treeFile("HuffmanTree.tne");
        string inputFileName2 = "Buffer.tne";
        if (!treeFile.is_open())
        {
            cerr << "Error opening Huffman tree file!" << endl;
            return 1;
        }

        HuffmanDecoding huffmanDecoding;
        NodeData *root = huffmanDecoding.buildHuffmanTree(treeFile);
        treeFile.close();

        huffmanDecoding = HuffmanDecoding(root);

        string inputFileName = "Compressed.tne";
        string outputFileName = "Decompressed.tne";

        string decodedString = huffmanDecoding.decodeBinaryFile(inputFileName);

        huffmanDecoding.saveDecodedStringToFile(decodedString, outputFileName);

        cout <<  endl <<"Decompressed File Successfully Created!" << endl;

        return 0;
    }
