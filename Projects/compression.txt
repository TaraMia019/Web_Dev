#include <iostream>
#include <fstream>
#include <queue>
#include <bitset>

using namespace std;

const int MAX_CHAR = 256; //ASCII characters

struct NodeData {
    char data;
    int frequency;
    string huffmanCode;
    NodeData* left;
    NodeData* right;

    NodeData(char c, int freq) : data(c), frequency(freq), left(nullptr), right(nullptr) {}
};

struct CompareNodes {
    bool operator()(NodeData* left, NodeData* right) {
        return left->frequency > right->frequency;
    }
};

class HuffmanCoding {
private:
    NodeData* root;

public:
    HuffmanCoding() : root(nullptr) {}

    NodeData* buildHuffmanTree(ifstream& inputFile) {
        priority_queue<NodeData*, vector<NodeData*>, CompareNodes> pq;
        int charFrequency[MAX_CHAR] = {0};
        char ch;

        while (inputFile.get(ch)) {
            charFrequency[static_cast<unsigned char>(ch)]++;
        }

        for (int i = 0; i < MAX_CHAR; ++i) {
            if (charFrequency[i] > 0) {
                pq.push(new NodeData(static_cast<char>(i), charFrequency[i]));
            }
        }

        while (pq.size() > 1) {
            NodeData* left = pq.top();
            pq.pop();
            NodeData* right = pq.top();
            pq.pop();

            NodeData* combined = new NodeData('\0', left->frequency + right->frequency);
            combined->left = left;
            combined->right = right;

            pq.push(combined);
        }

        return pq.top();
    }

    void generateHuffmanCodes(NodeData* node, ofstream& outputFile, string code = "") {
        if (!node) {
            return;
        }

        if (node->data != '\0') {
            node->huffmanCode = code;
            outputFile << node->huffmanCode;
        }

        generateHuffmanCodes(node->left, outputFile, code + "0");
        generateHuffmanCodes(node->right, outputFile, code + "1");
    }

    void compressFile(const string& inputFileName, const string& outputFileName) {
        ifstream inputFile(inputFileName);
        ofstream outputFile(outputFileName);

        if (!inputFile.is_open() || !outputFile.is_open()) {
            cerr << "Error opening files!" << endl;
            return;
        }

        root = buildHuffmanTree(inputFile);
        generateHuffmanCodes(root, outputFile);

        // Ensure the length of the output is divisible by 8
        int remainingBits = outputFile.tellp() % 8;
        if (remainingBits > 0) {
            int paddingZeros = 8 - remainingBits;
            for (int i = 0; i < paddingZeros; ++i) {
                outputFile << '0';
            }
        }

        inputFile.close();
        outputFile.close();
    }

    void readBinaryAndConvertToAscii(const string& inputFileName, const string& outputFileName) {
        ifstream inputFile(inputFileName, ios::binary);
        ofstream outputFile(outputFileName, ios::app); // Append to the existing file

        if (!inputFile.is_open() || !outputFile.is_open()) {
            cerr << "Error opening files for reading binary and writing ASCII!" << endl;
            return;
        }

        char binaryChar;
        string binaryString;
        while (inputFile.get(binaryChar)) {
            binaryString += binaryChar;
        }

        // Convert binary string to decimal
        int decimalValue = stoi(binaryString, nullptr, 2);

        // Convert decimal to ASCII
        char asciiChar = static_cast<char>(decimalValuex);

        // Write ASCII result to "Compressed.txt"
        outputFile << ", " << decimalValue
                   << ", " << asciiChar << endl;

        inputFile.close();
        outputFile.close();
    }
};

int main() {
    HuffmanCoding huffman;

    cout << "Compressed File Successfully Created!" << endl;

    // Create an input file with characters "Mississippi River"
    ofstream inputFile("OriginalText.txt");
    if (inputFile.is_open()) {
        inputFile << "Mississippi River";
        inputFile.close();
    } else {
        cerr << "Error creating input file!\n";
        return 1;
    }

    // Compress the characters and write the output to "Compressed.txt"
    string inputFileName = "OriginalText.txt";
    string outputFileName = "Compressed.txt";
    huffman.compressFile(inputFileName, outputFileName);

    // Read the binary from "Compressed.txt" and convert to ASCII
    huffman.readBinaryAndConvertToAscii(outputFileName, outputFileName);

    return 0;
}
